// Generated by CoffeeScript 1.4.0
(function() {
  var b64pad, binb2b64, binb2hex, binb2str, chrsz, core_hmac_sha1, core_sha1, hexcase, rol, safe_add, sha1_ft, sha1_kt, sha1_vm_test, str2binb;

  hexcase = 0;

  b64pad = "";

  chrsz = 8;

  exports.hex_sha1 = function(s) {
    return binb2hex(core_sha1(str2binb(s), s.length * chrsz));
  };

  exports.b64_sha1 = function(s) {
    return binb2b64(core_sha1(str2binb(s), s.length * chrsz));
  };

  exports.str_sha1 = function(s) {
    return binb2str(core_sha1(str2binb(s), s.length * chrsz));
  };

  exports.hex_hmac_sha1 = function(key, data) {
    return binb2hex(core_hmac_sha1(key, data));
  };

  exports.b64_hmac_sha1 = function(key, data) {
    return binb2b64(core_hmac_sha1(key, data));
  };

  exports.str_hmac_sha1 = function(key, data) {
    return binb2str(core_hmac_sha1(key, data));
  };

  sha1_vm_test = function() {
    return hex_sha1("abc") === "a9993e364706816aba3e25717850c26c9cd0d89d";
  };

  core_sha1 = function(x, len) {
    var a, b, c, d, e, i, j, olda, oldb, oldc, oldd, olde, t, w, _i, _j, _ref;
    i = len >> 5;
    if (x[i] === void 0) {
      x[i] = 0x80 << (24 - len % 32);
    } else {
      x[i] |= 0x80 << (24 - len % 32);
    }
    x[((len + 64 >> 9) << 4) + 15] = len;
    w = Array(80);
    a = 1732584193;
    b = -271733879;
    c = -1732584194;
    d = 271733878;
    e = -1009589776;
    for (i = _i = 0, _ref = x.length; _i < _ref; i = _i += 16) {
      olda = a;
      oldb = b;
      oldc = c;
      oldd = d;
      olde = e;
      for (j = _j = 0; _j < 80; j = ++_j) {
        if (j < 16) {
          w[j] = x[i + j];
        } else {
          w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
        }
        t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));
        e = d;
        d = c;
        c = rol(b, 30);
        b = a;
        a = t;
      }
      a = safe_add(a, olda);
      b = safe_add(b, oldb);
      c = safe_add(c, oldc);
      d = safe_add(d, oldd);
      e = safe_add(e, olde);
    }
    return Array(a, b, c, d, e);
  };

  sha1_ft = function(t, b, c, d) {
    if (t < 20) {
      return (b & c) | ((~b) & d);
    } else if (t < 40) {
      return b ^ c ^ d;
    } else if (t < 60) {
      return (b & c) | (b & d) | (c & d);
    } else {
      return b ^ c ^ d;
    }
  };

  sha1_kt = function(t) {
    if (t < 20) {
      return 1518500249;
    } else {
      if (t < 40) {
        return 1859775393;
      } else {
        if (t < 60) {
          return -1894007588;
        } else {
          return -899497514;
        }
      }
    }
  };

  core_hmac_sha1 = function(key, data) {
    var bkey, hash, i, ipad, k, opad, _i;
    bkey = str2binb(key);
    if (bkey.length > 16) {
      bkey = core_sha1(bkey, key.length * chrsz);
    }
    ipad = Array(16);
    opad = Array(16);
    for (i = _i = 0; _i < 16; i = ++_i) {
      k = bkey[i] !== void 0 ? bkey[i] : 0;
      ipad[i] = k ^ 0x36363636;
      opad[i] = k ^ 0x5C5C5C5C;
    }
    hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * chrsz);
    return core_sha1(opad.concat(hash), 512 + 160);
  };

  safe_add = function(x, y) {
    var lsw, msw;
    lsw = (x & 0xFFFF) + (y & 0xFFFF);
    msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return (msw << 16) | (lsw & 0xFFFF);
  };

  rol = function(num, cnt) {
    return (num << cnt) | (num >>> (32 - cnt));
  };

  str2binb = function(str) {
    var bin, i, mask, _i, _ref;
    bin = Array();
    mask = (1 << chrsz) - 1;
    for (i = _i = 0, _ref = str.length * chrsz; 0 <= _ref ? _i < _ref : _i > _ref; i = _i += chrsz) {
      if (bin[i >> 5] !== void 0) {
        bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (32 - chrsz - i % 32);
      } else {
        bin[i >> 5] = (str.charCodeAt(i / chrsz) & mask) << (32 - chrsz - i % 32);
      }
    }
    return bin;
  };

  binb2str = function(bin) {
    var i, mask, str, _i, _ref;
    str = "";
    mask = (1 << chrsz) - 1;
    for (i = _i = 0, _ref = bin.length * 32; 0 <= _ref ? _i < _ref : _i > _ref; i = _i += chrsz) {
      str += String.fromCharCode((bin[i >> 5] >>> (32 - chrsz - i % 32)) & mask);
    }
    return str;
  };

  binb2hex = function(binarray) {
    var hex_tab, i, str, _i, _ref;
    hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
    str = "";
    for (i = _i = 0, _ref = binarray.length * 4; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      str += hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8 + 4)) & 0xF) + hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8)) & 0xF);
    }
    return str;
  };

  binb2b64 = function(binarray) {
    var b1, b2, b3, i, j, str, tab, triplet, _i, _j, _ref;
    tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    str = "";
    for (i = _i = 0, _ref = binarray.length * 4; _i < _ref; i = _i += 3) {
      b1 = binarray[i >> 2] !== void 0 ? ((binarray[i >> 2] >> 8 * (3 - i % 4)) & 0xFF) << 16 : 0;
      b2 = binarray[i + 1 >> 2] !== void 0 ? ((binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4)) & 0xFF) << 8 : 0;
      b3 = binarray[i + 2 >> 2] !== void 0 ? (binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4)) & 0xFF : 0;
      triplet = b1 | b2 | b3;
      for (j = _j = 0; _j < 4; j = ++_j) {
        if (i * 8 + j * 6 > binarray.length * 32) {
          str += b64pad;
        } else {
          str += tab.charAt((triplet >> 6 * (3 - j)) & 0x3F);
        }
      }
    }
    return str;
  };

}).call(this);
