// Generated by CoffeeScript 1.4.0
(function() {
  var generatePrivateKey;

  generatePrivateKey = function() {
    var guid;
    guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r, v;
      r = Math.random() * 16 | 0;
      v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
    return guid.toUpperCase();
  };

  exports.SiteOptions = (function() {

    function SiteOptions(private_key, length, char_mode, site_tag, bump) {
      var _ref, _ref1, _ref2, _ref3;
      this.private_key = private_key;
      this.length = length;
      this.char_mode = char_mode;
      this.site_tag = site_tag;
      this.bump = bump;
      if (!this.private_key) {
        this.private_key = generatePrivateKey();
      }
      if ((_ref = this.length) == null) {
        this.length = 12;
      }
      if ((_ref1 = this.char_mode) == null) {
        this.char_mode = "alnum";
      }
      if ((_ref2 = this.site_tag) == null) {
        this.site_tag = null;
      }
      if ((_ref3 = this.bump) == null) {
        this.bump = 0;
      }
      if (this.length < 1) {
        this.length = 1;
      }
    }

    SiteOptions.generatePrivateKey = generatePrivateKey;

    SiteOptions.prototype.toDict = function() {
      return {
        private_key: this.private_key,
        length: this.length,
        char_mode: this.char_mode,
        site_tag: this.site_tag,
        bump: this.bump
      };
    };

    SiteOptions.fromDict = function(dict) {
      return new SiteOptions(dict['private_key'], dict['length'], dict['char_mode'], dict['site_tag'], dict['bump']);
    };

    SiteOptions.prototype.getFullTag = function() {
      if (!this.site_tag) {
        return "generic";
      } else if (this.bump > 0) {
        return "" + this.site_tag + ":" + this.bump;
      } else {
        return this.site_tag;
      }
    };

    return SiteOptions;

  })();

}).call(this);
