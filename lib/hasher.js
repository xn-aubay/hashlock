// Generated by CoffeeScript 1.4.0
(function() {
  var crypto;

  crypto = require("./crypto");

  exports.PasswordHasher = (function() {

    function PasswordHasher() {}

    PasswordHasher.prototype.generateHashWord = function(siteTag, masterKey, hashWordSize, requireDigit, requirePunctuation, requireMixedCase, restrictSpecial, restrictDigits) {
      var i, s, sum, _i, _ref;
      s = crypto.b64_hmac_sha1(masterKey, siteTag);
      sum = 0;
      for (i = _i = 0, _ref = s.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        sum += s.charCodeAt(i);
      }
      if (restrictDigits) {
        s = this.convertToDigits(s, sum, hashWordSize);
      } else {
        if (requireDigit) {
          s = this.injectSpecialCharacter(s, 0, 4, sum, hashWordSize, 48, 10);
        }
        if (requirePunctuation && !restrictSpecial) {
          s = this.injectSpecialCharacter(s, 1, 4, sum, hashWordSize, 33, 15);
        }
        if (requireMixedCase) {
          s = this.injectSpecialCharacter(s, 2, 4, sum, hashWordSize, 65, 26);
          s = this.injectSpecialCharacter(s, 3, 4, sum, hashWordSize, 97, 26);
        }
        if (restrictSpecial) {
          s = this.removeSpecialCharacters(s, sum, hashWordSize);
        }
      }
      return s.substr(0, hashWordSize);
    };

    PasswordHasher.prototype.injectSpecialCharacter = function(sInput, offset, reserved, seed, lenOut, cStart, cNum) {
      var c, i, i2, pos, pos0, sHead, sInject, sTail, _i, _ref;
      pos0 = seed % lenOut;
      pos = (pos0 + offset) % lenOut;
      for (i = _i = 0, _ref = lenOut - reserved; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        i2 = (pos0 + reserved + i) % lenOut;
        c = sInput.charCodeAt(i2);
        if (c >= cStart && c < cStart + cNum) {
          return sInput;
        }
      }
      sHead = pos > 0 ? sInput.substring(0, pos) : "";
      sInject = String.fromCharCode(((seed + sInput.charCodeAt(pos)) % cNum) + cStart);
      sTail = pos + 1 < sInput.length ? sInput.substring(pos + 1, sInput.length) : "";
      return sHead + sInject + sTail;
    };

    PasswordHasher.prototype.removeSpecialCharacters = function(sInput, seed, lenOut) {
      var i, j, s;
      s = '';
      i = 0;
      while (i < lenOut) {
        j = sInput.substring(i).search(/[^a-z0-9]/i);
        if (j < 0) {
          break;
        }
        if (j > 0) {
          s += sInput.substring(i, i + j);
        }
        s += String.fromCharCode((seed + i) % 26 + 65);
        i += j + 1;
      }
      if (i < sInput.length) {
        s += sInput.substring(i);
      }
      return s;
    };

    PasswordHasher.prototype.convertToDigits = function(sInput, seed, lenOut) {
      var i, j, s;
      s = '';
      i = 0;
      while (i < lenOut) {
        j = sInput.substring(i).search(/[^0-9]/i);
        if (j < 0) {
          break;
        }
        if (j > 0) {
          s += sInput.substring(i, i + j);
        }
        s += String.fromCharCode((seed + sInput.charCodeAt(i)) % 10 + 48);
        i += j + 1;
      }
      if (i < sInput.length) {
        s += sInput.substring(i);
      }
      return s;
    };

    PasswordHasher.prototype.getHash = function(options, base_password) {
      var final_hash, site_key;
      site_key = this.generateHashWord(options.private_key, options.getFullTag(), 24, true, true, true, false, false);
      final_hash = this.generateHashWord(site_key, base_password, options.length, true, false, true, true, false);
      return final_hash;
    };

    return PasswordHasher;

  })();

}).call(this);
