// Generated by CoffeeScript 1.4.0
(function() {
  var HashLockAbstractWorker, SimplePrefs, SiteOptions, tabs,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  HashLockAbstractWorker = require('./common').HashLockAbstractWorker;

  SiteOptions = require('../options').SiteOptions;

  SimplePrefs = require('sdk/simple-prefs');

  tabs = require('sdk/tabs');

  exports.HashLockFirefoxWorker = (function(_super) {

    __extends(HashLockFirefoxWorker, _super);

    function HashLockFirefoxWorker() {
      return HashLockFirefoxWorker.__super__.constructor.apply(this, arguments);
    }

    HashLockFirefoxWorker.prototype.getDefaultOptions = function() {
      var name, options, value, _ref,
        _this = this;
      options = SiteOptions.fromDict(SimplePrefs.prefs);
      this.saveDefaultOptions(options);
      _ref = options.toDict();
      for (name in _ref) {
        value = _ref[name];
        SimplePrefs.on(name, function() {
          _this.default_options = SiteOptions.fromDict(SimplePrefs.prefs);
          return _this.saveDefaultOptions(_this.default_options);
        });
      }
      return options;
    };

    HashLockFirefoxWorker.prototype.getCurrentUrl = function() {
      return tabs.activeTab.url;
    };

    HashLockFirefoxWorker.prototype.saveDefaultOptions = function(options) {
      var name, value, _ref, _results;
      _ref = options.toDict();
      _results = [];
      for (name in _ref) {
        value = _ref[name];
        if (value != null) {
          _results.push(SimplePrefs.prefs[name] = value);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    HashLockFirefoxWorker.prototype.addPeer = function(peer, secure) {
      var _this = this;
      if (secure == null) {
        secure = false;
      }
      peer.on("hashRequest", function(password) {
        var result;
        result = _this.hashRequest(password);
        return peer.emit('hashResponse', result);
      });
      if (secure) {
        return peer.on("optionsRequest", function(options) {
          var result;
          result = _this.optionsRequest(options);
          return peer.emit("optionsResponse", result);
        });
      }
    };

    HashLockFirefoxWorker.prototype.removePeer = function(peer) {
      return console.log("TODO : Remove peer");
    };

    return HashLockFirefoxWorker;

  })(HashLockAbstractWorker);

}).call(this);
