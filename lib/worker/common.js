// Generated by CoffeeScript 1.4.0
(function() {
  var OptionsStore, PasswordHasher, SiteOptions;

  PasswordHasher = require('../hasher').PasswordHasher;

  SiteOptions = require('../options').SiteOptions;

  OptionsStore = require('../store').OptionsStore;

  exports.HashLockAbstractWorker = (function() {

    function HashLockAbstractWorker() {
      this.hasher = new PasswordHasher();
      this.store = new OptionsStore(this.getDefaultOptions());
    }

    HashLockAbstractWorker.prototype.getDefaultOptions = function() {
      return new SiteOptions();
    };

    HashLockAbstractWorker.prototype.getCurrentUrl = function() {
      return null;
    };

    HashLockAbstractWorker.prototype.getSiteOptions = function(site_tag) {
      return this.store.getOptions(site_tag != null ? site_tag : this.stripSiteTag(this.getCurrentUrl()));
    };

    HashLockAbstractWorker.prototype.hashRequest = function(base_password) {
      var config, site_tag;
      site_tag = this.stripSiteTag(this.getCurrentUrl());
      config = this.getSiteOptions();
      return this.hasher.getHash(config, base_password);
    };

    HashLockAbstractWorker.prototype.optionsRequest = function(options) {
      return this.getSiteOptions();
    };

    HashLockAbstractWorker.prototype.stripSiteTag = function(url) {
      var m, reg;
      if (!(url != null)) {
        return null;
      }
      reg = new RegExp("^https?://([^:/]+\\.)?([^.:/]+)\\.([a-z]{2,5})(:\\d+)?/.*$");
      m = reg.exec(url);
      try {
        if ("" === m[2]) {
          return 'generic';
        } else {
          return m[2];
        }
      } catch (e) {
        return 'generic';
      }
    };

    return HashLockAbstractWorker;

  })();

}).call(this);
